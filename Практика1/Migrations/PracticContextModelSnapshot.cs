// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Практика1.Models;

#nullable disable

namespace Практика1.Migrations
{
    [DbContext(typeof(PracticContext))]
    partial class PracticContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProductsOrder", b =>
                {
                    b.Property<long>("IdOrder")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Order");

                    b.Property<long>("IdProduct")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Product");

                    b.HasKey("IdOrder", "IdProduct")
                        .HasName("Products_Orders_pkey");

                    b.HasIndex("IdProduct");

                    b.ToTable("Products_Orders", (string)null);
                });

            modelBuilder.Entity("ServicesOrder", b =>
                {
                    b.Property<long>("IdOrder")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Order");

                    b.Property<long>("IdService")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Service");

                    b.HasKey("IdOrder", "IdService")
                        .HasName("Services_Orders_pkey");

                    b.HasIndex("IdService");

                    b.ToTable("Services_Orders", (string)null);
                });

            modelBuilder.Entity("Практика1.Models.Account", b =>
                {
                    b.Property<long>("IdEmployee")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Employee");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.HasKey("IdEmployee")
                        .HasName("Accounts_pkey");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Практика1.Models.Client", b =>
                {
                    b.Property<long>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Client");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdClient"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mail")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdClient")
                        .HasName("Clients_pkey");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Практика1.Models.Employee", b =>
                {
                    b.Property<long>("IdEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Employee");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdEmployee"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("Post")
                        .HasColumnType("text");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("money");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdEmployee")
                        .HasName("Employees_pkey");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Практика1.Models.Order", b =>
                {
                    b.Property<long>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Order");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdOrder"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<long>("IdClient")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Client");

                    b.Property<long>("IdEmployee")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Employee");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("IdOrder")
                        .HasName("Orders_pkey");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdEmployee");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Практика1.Models.Product", b =>
                {
                    b.Property<long>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Product");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdProduct"));

                    b.Property<long?>("Count")
                        .HasColumnType("bigint");

                    b.Property<long>("IdProvider")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Provider");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("IdProduct")
                        .HasName("Products_pkey");

                    b.HasIndex("IdProvider");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Практика1.Models.Provider", b =>
                {
                    b.Property<long>("IdProvider")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Provider");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdProvider"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("IdProvider")
                        .HasName("Providers_pkey");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Практика1.Models.Review", b =>
                {
                    b.Property<long>("IdReview")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Review");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdReview"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<long>("IdClient")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Client");

                    b.Property<long>("IdProduct")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Product");

                    b.Property<long>("Rating")
                        .HasColumnType("bigint");

                    b.HasKey("IdReview")
                        .HasName("Reviews_pkey");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdProduct");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Практика1.Models.Service", b =>
                {
                    b.Property<long>("IdService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Service");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdService"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdService")
                        .HasName("Services_pkey");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ProductsOrder", b =>
                {
                    b.HasOne("Практика1.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("IdOrder")
                        .IsRequired()
                        .HasConstraintName("Products_Orders_ID_Order_fkey");

                    b.HasOne("Практика1.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("Products_Orders_ID_Product_fkey");
                });

            modelBuilder.Entity("ServicesOrder", b =>
                {
                    b.HasOne("Практика1.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("IdOrder")
                        .IsRequired()
                        .HasConstraintName("Services_Orders_ID_Order_fkey");

                    b.HasOne("Практика1.Models.Service", null)
                        .WithMany()
                        .HasForeignKey("IdService")
                        .IsRequired()
                        .HasConstraintName("Services_Orders_ID_Service_fkey");
                });

            modelBuilder.Entity("Практика1.Models.Account", b =>
                {
                    b.HasOne("Практика1.Models.Employee", "IdEmployeeNavigation")
                        .WithOne("Account")
                        .HasForeignKey("Практика1.Models.Account", "IdEmployee")
                        .IsRequired()
                        .HasConstraintName("Accounts_ID_Employee_fkey");

                    b.Navigation("IdEmployeeNavigation");
                });

            modelBuilder.Entity("Практика1.Models.Order", b =>
                {
                    b.HasOne("Практика1.Models.Client", "IdClientNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdClient")
                        .IsRequired()
                        .HasConstraintName("Orders_ID_Client_fkey");

                    b.HasOne("Практика1.Models.Employee", "IdEmployeeNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdEmployee")
                        .IsRequired()
                        .HasConstraintName("Orders_ID_Employee_fkey");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdEmployeeNavigation");
                });

            modelBuilder.Entity("Практика1.Models.Product", b =>
                {
                    b.HasOne("Практика1.Models.Provider", "IdProviderNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdProvider")
                        .IsRequired()
                        .HasConstraintName("Products_ID_Provider_fkey");

                    b.Navigation("IdProviderNavigation");
                });

            modelBuilder.Entity("Практика1.Models.Review", b =>
                {
                    b.HasOne("Практика1.Models.Client", "IdClientNavigation")
                        .WithMany("Reviews")
                        .HasForeignKey("IdClient")
                        .IsRequired()
                        .HasConstraintName("Reviews_ID_Client_fkey");

                    b.HasOne("Практика1.Models.Product", "IdProductNavigation")
                        .WithMany("Reviews")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("Reviews_ID_Product_fkey");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("Практика1.Models.Client", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Практика1.Models.Employee", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Практика1.Models.Product", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Практика1.Models.Provider", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
